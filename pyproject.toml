[project]
name = "hebrew-year-process-bot"
authors = ["aviadlevy <aviadlevy1@gmail.com>"]
readme = "README.md"
license = "LICENSE"

[tool.poetry]
name = "hebrew-year-process-bot"
version = "0.1.0"
description = ""
authors = ["aviadlevy <aviadlevy1@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
aiohttp = "^3.9.3"
astral = "<3.0"
async-lru = "^2.0.4"
hdate = "^0.10.8"
mastodon-py = "~1.8.1"
pytz = "^2024.1"
requests = "^2.32.0"
tweepy = "^4.14.0"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
coverage = "^7.2.7"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff.lint]
select = [
    "B002", # Python does not support the unary prefix increment
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "B023", # Function definition does not bind loop variable {name}
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B904", # Use raise from to specify exception cause
    "C",  # complexity
    "COM818", # Trailing comma on bare tuple prohibited
    "DTZ003",  # Use datetime.now(tz=) instead of datetime.utcnow()
    "DTZ004",  # Use datetime.fromtimestamp(ts, tz=) instead of datetime.utcfromtimestamp(ts)
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "G", # flake8-logging-format
    "I",  # isort
    "ICN001", # import concentions; {name} should be imported as {asname}
    "N804", # First argument of a class method should be named cls
    "N805", # First argument of a method should be named self
    "N815", # Variable {name} in class scope should not be mixedCase
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "PLC", # pylint
    "PLE", # pylint
    "PLR", # pylint
    "PLW", # pylint
    "Q000", # Double quotes found but single quotes preferred
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "S102", # Use of exec detected
    "S103",  # bad-file-permissions
    "S108",  # hardcoded-temp-file
    "S306",  # suspicious-mktemp-usage
    "S307",  # suspicious-eval-usage
    "S313",  # suspicious-xmlc-element-tree-usage
    "S314",  # suspicious-xml-element-tree-usage
    "S315",  # suspicious-xml-expat-reader-usage
    "S316",  # suspicious-xml-expat-builder-usage
    "S317",  # suspicious-xml-sax-usage
    "S318",  # suspicious-xml-mini-dom-usage
    "S319",  # suspicious-xml-pull-dom-usage
    "S320",  # suspicious-xmle-tree-usage
    "S601",  # paramiko-call
    "S602",  # subprocess-popen-with-shell-equals-true
    "S604",  # call-with-shell-equals-true
    "S608",  # hardcoded-sql-expression
    "S609",  # unix-command-wildcard-injection
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM208", # Use {expr} instead of not (not {expr})
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "T100", # Trace found: {name} used
    "TID251", # Banned imports
    "TRY004", # Prefer TypeError exception for invalid type
    "TRY302", # Remove exception handler; error is immediately re-raised
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

ignore = [
    "E501", # line too long
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["hypb"]
combine-as-imports = true
split-on-trailing-comma = false


[tool.ruff.lint.per-file-ignores]
"tests/*" = ["PLR2004"]